
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000012  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   000007df  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000006a2  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000002fe  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000074  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000037e  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000000f5  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000018  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 00 	call	0xde	; 0xde <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	return 0;
}

void USART_Init(unsigned int ubrr){
  // Set baud rate
  UBRR0H = (unsigned char)(ubrr>>8);
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = (unsigned char)ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

  // enable receiver & transmitter
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

  // Set frame format: 8 data, 2 stop bit
  UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  8e:	8e e0       	ldi	r24, 0x0E	; 14
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

}
  94:	08 95       	ret

00000096 <USART_Transmit>:

void USART_Transmit(unsigned char data){
  // wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <USART_Transmit>
  UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  a2:	08 95       	ret

000000a4 <USART_Receive>:

unsigned char USART_Receive(void){

  // wait for data to be received
  while(!(UCSR0A & (1<<RXC0)));
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  a8:	87 ff       	sbrs	r24, 7
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <USART_Receive>
  return UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b0:	08 95       	ret

000000b2 <USART_Flush>:

void USART_Flush(void){

	unsigned char dummy;
	while(UCSR0A & (1<<RXC0)) dummy = UDR0;
  b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  b6:	87 ff       	sbrs	r24, 7
}
  b8:	08 95       	ret
	while(UCSR0A & (1<<RXC0)) dummy = UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <USART_Flush>

000000c0 <delay_ms>:

void delay_ms(uint16_t x){
  c0:	9c 01       	movw	r18, r24
	uint8_t y, z;
	for( ; x > 0; x--){
  c2:	21 15       	cp	r18, r1
  c4:	31 05       	cpc	r19, r1
  c6:	09 f4       	brne	.+2      	; 0xca <delay_ms+0xa>
			for(z=0; z < 40; z++){
				asm volatile("nop");
			}
		}
	}
}
  c8:	08 95       	ret
  ca:	90 e5       	ldi	r25, 0x50	; 80
void delay_ms(uint16_t x){
  cc:	88 e2       	ldi	r24, 0x28	; 40
				asm volatile("nop");
  ce:	00 00       	nop
			for(z=0; z < 40; z++){
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	e9 f7       	brne	.-6      	; 0xce <delay_ms+0xe>
		for(y=0; y < 80; y++){
  d4:	91 50       	subi	r25, 0x01	; 1
  d6:	d1 f7       	brne	.-12     	; 0xcc <delay_ms+0xc>
	for( ; x > 0; x--){
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	f2 cf       	rjmp	.-28     	; 0xc2 <delay_ms+0x2>

000000de <main>:
	USART_Init(MYUBRR);
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
  	USART_Transmit('a');
  e6:	81 e6       	ldi	r24, 0x61	; 97
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
		USART_Transmit('b');
  ec:	82 e6       	ldi	r24, 0x62	; 98
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
		delay_ms(1000);
  f2:	88 ee       	ldi	r24, 0xE8	; 232
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	0e 94 60 00 	call	0xc0	; 0xc0 <delay_ms>
	while(1){
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <main+0x8>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
